module DatascrapperHelper

  #these methods are visible to both views and controllers

  def data_scraper(my_url)
    puts "Entered In Data Scrapper Helper by Nokogiri Code"
    Nokogiri::HTML(open(my_url))
  end

  def url_to_scrap(my_url)
    #puts "Display main URL ------------- > "+ my_url
    return my_url
  end

  def get_filtered_scrapped_data(data_from_nokogiri)


    data_class=data_from_nokogiri.class
    data_filtered_by_css=data_from_nokogiri.css('body')
    data_filtered_by_css_mapped=data_from_nokogiri.css('body').map(&:text)

    puts "==================================="
    puts data_class
    puts data_filtered_by_css.length   # => 6
    puts data_filtered_by_css
    puts data_filtered_by_css_mapped
    puts "============FILTERED DATA START======================="

    data_filtered_by_script_to_text = data_from_nokogiri.at('script').text
    data_filtered_by_script_limit=data_from_nokogiri.search('script')[1]
    data_filtered_by_script_count=data_from_nokogiri.search("//script[not(@hidden)]").count

    #The content generated by react is not visible
    puts "==================================="
    puts data_filtered_by_script_to_text
    puts data_filtered_by_script_limit
    puts data_filtered_by_script_count
    puts "===============FILTERED DATA ENDS====================="

    # links=data_from_nokogiri.css('div.wrapper > div.merchant-content-container')
    required_result=data_from_nokogiri.css('html body div > div.merchant-content-container')
    puts required_result.map(&:text)
    puts required_result.count #should be 9 for that page
    puts "=============PROGRAM EXITING AFTER SCRAPPING======================="



    if (required_result.count >=9)
      puts "============REQUIRED RESULT ========================="
      @filtered_result=required_result.to_yaml
      return [true,@filtered_result]
    else
      pusts "================ NO ITEMS FOUND BY THIS METHOD ========================="
      @filtered_result="XXXXXXXXXXX - NO ITEMS FOUND BY THIS METHOD -XXXXXXXXXXXXX"
      return [false,@filtered_result]
    end


  end


  def open_browser(url2)
    offer_tile_category_tag, offer_tile_name, offer_tile_description,offer_tile_price=''
    puts "Entered In browser Opening Code"
    # Specify the driver path
    chromedriver_path = File.join(File.absolute_path('../..', File.dirname(__FILE__)),"browsers","chromedriver.exe")
    puts chromedriver_path
    Selenium::WebDriver::Service.driver_path = chromedriver_path

    #start_browser
    # browser=Watir::Browser.new :chrome
    # browser.goto("https://google.com")
    # browser.close;
    browser = Watir::Browser.start url2

    browser.element(css: ".merchant-offers .merchant-menu-category").wait_until(&:present?)
    js_rendered_content = browser.element(css: ".merchant-offers .merchant-menu-category")


    puts "******************************************"
    puts js_rendered_content.to_yaml
    puts "******************************************"
    rendered_content=browser.elements(:class=>"merchant-menu-category")
    rendered_content_first=browser.elements(:class=>"merchant-menu-category").first.html
    rendered_content_size=browser.elements(:class=>"merchant-menu-category").size
    puts rendered_content_size
    puts rendered_content

    array_of_items=[]
    puts "******************************************"

    puts "LISTING HTML OF OUR REQUIRED ELEMENTS"
    rendered_content.each_with_index do |section, section_index|


      puts "SECTION:"+section.text
      puts "SECTION INDEX:"+section_index.to_s
      array_of_items << {
          item: section.text
      }
    end

    #puts "DRIVER LOADED"
    #browser.goto home_path
    # browser.goto url2
    # browser.element(tag_name: 'section')
    # browser.div(:class => "ClassicMerchantOffers").should exist
    #js_rendered_content.link.click
    js_rendered_content.html
    array_of_items
  end


end
