class ApplicationController < ActionController::Base

  # def get_jobs
  #   puts "I am inside"
  #     data = data_scraper(main_url)
  #     all_sections = data.css('table > tr > td > table > tr > td:nth-child(3) > table > tr')
  #     sections = all_sections.slice(2..all_sections.length)
  #     return "hello"
  # end

  # def data_scraper(url)
  #     Nokogiri::HTML(open(url))
  # end

def get_items

    input_url_received = params['input_url']
    puts "RECEIVED URL"+input_url_received

    @title="Web Scrapper Application"
    puts " ENTERING GET ITEMS CODE ----------------"

    offer_tile_category_tag, offer_tile_name, offer_tile_description,offer_tile_price=''


    # base_url = 'https://www.trycaviar.com'
    # main_url = "#{base_url}/peninsula/rise-pizzeria-6431" 
    # main_url="https://www.trycaviar.com/peninsula/rise-pizzeria-6431"
    # puts "Display main URL"+main_url

    main_url=input_url_received

    data = data_scraper(main_url)
    #Watir::Browser.new
    # all_sections = data.css('table > tr > td > table > tr > td:nth-child(3) > table > tr')
     #puts "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    #puts data.to_s
    # all_sections = data.css('h3 ul li')

    puts "==================================="
     puts data.class
     puts "==================================="
    # links=data.css('div.wrapper > div.merchant-content-container')
    # links=data.css('html body div > div.merchant-content-container').map(&:text)
    
    links=data.css('body')
    links_text=data.css('body').map(&:text)
    puts links

    js = data.at('script').text
    js2=data.search('script')[1]
    js3=data.search("//script[not(@hidden)]").count
    #The content generated by react is not visible
     puts"=================================="
     puts links.length   # => 6
     puts js
     puts "==================================="
     puts js2
     puts"================================="
     puts js3
     puts"================================="

     

    # puts all_sections.length.to_s
    # sections = all_sections.slice(2..all_sections.length)
    #  puts sections.to_s

    # sections.each_with_index do |section, section_index|
    #     puts "SECTION:"+section
    #     puts "SECTION INDEX:"+section_index.to_s
    #     puts "XXXXXXXXXXXXXXXXXXXXXXXXXX"

    #     if section_index % 3 == 0
    #         # date = section.text
    #     elsif section_index % 3 == 1
    #         section.css('font').each_with_index do |job, job_index|
    #         #  puts "MY JOB INDEX :"+job_index.to_s
    #             if job_index % 3 == 0
    #                 # role = job.text.strip
    #                 # # puts "--------------------------"
    #                 # # puts "MY ROLE:"+role
    #                 # # puts "--------------------------"
    #                 # #url = "#{base_url}#{job.at_css('a')['href']}"
    #             elsif job_index % 3 == 1
    #                 # company = job.text.strip
    #                 # array_of_items << {
    #                 #     date: date,
    #                 #     role: role,
    #                 #     url: url,
    #                 #     company: company
    #                 #}
    #             end
    #         end
    #     end
    #   end

    #puts sections
    puts " PROGRAM EXITING AFTER SCRAPPING ><><><><><><><><><><><><><><><>"
    @result=links

    #OPEN BROWSER/TAKESCREENSHOT
    open_browser(main_url)
   
end

def data_scraper(url)
    Nokogiri::HTML(open(url))
end

def search
end

def open_browser(url2)
puts "Entered In browser"
 browser=Watir::Browser.new :chrome, url: 'http://localhost:4444/wd/hub'
#  :chrome, url: "http://127.0.0.1:444/wd/hub"
 browser.goto(url2)
 #browser.goto home_path
  puts "DRIVER LOADED"
  # browser.goto url2
  # browser.element(tag_name: 'section')
  # browser.div(:class => "ClassicMerchantOffers").should exist
  # caps =  Selenium: : WebDriver: : Remote: : Capabilities. chrome( " chromeOptions "  = >  { " args "  = >  [  " --disable-web-security "  ] } )  driver =  Selenium: : WebDriver. for  : remote,  url:  'http://localhost:4444/wd/hub'  desired_capabilities:  caps
end

end
