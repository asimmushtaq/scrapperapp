class ApplicationController < ActionController::Base

  # def get_jobs
  #   puts "I am inside"

  #     base_url = ''
  #     main_url = "#{base_url}/"
  #     data = data_scraper(main_url)

  #     all_sections = data.css('table > tr > td > table > tr > td:nth-child(3) > table > tr')
  #     sections = all_sections.slice(2..all_sections.length)
  #     return "hello"
  # end

  # def data_scraper(url)
  #     Nokogiri::HTML(open(url))
  # end

  def get_items

      input_url_received = params['input_url']
      puts "RECEIVED URL"+input_url_received

      @title="Web Scrapper Application"
      puts " ENTERING GET ITEMS CODE ----------------"

      # date, role, url, company, array_of_jobs = '', '', '', '', []

      offer_tile_category_tag, offer_tile_name, offer_tile_description,offer_tile_price=''


      # base_url = 'https://www.trycaviar.com'
      # main_url = "#{base_url}/peninsula/rise-pizzeria-6431" 
      # main_url="https://www.trycaviar.com/peninsula/rise-pizzeria-6431"

      main_url=input_url_received
      puts "Display main URL"+main_url

      data = data_scraper(main_url)
      #Watir::Browser.new
      # all_sections = data.css('table > tr > td > table > tr > td:nth-child(3) > table > tr')
       #puts "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
      #puts data.to_s
      # all_sections = data.css('h3 ul li')

      puts "==================================="
       puts data.class
       puts "==================================="
      # links=data.css('div.wrapper > div.merchant-content-container')
      # links=data.css('html body div > div.merchant-content-container').map(&:text)
      
      links=data.css('body')
      links_text=data.css('body').map(&:text)
      puts links

      js = data.at('script').text
      js2=data.search('script')[1]
      js3=data.search("//script[not(@hidden)]").count
      #The content generated by react is not visible
       puts"=================================="
       puts links.length   # => 6
       puts js
       puts "==================================="
       puts js2
       puts"================================="
       puts js3
       puts"================================="

       

      # puts all_sections.length.to_s
      # sections = all_sections.slice(2..all_sections.length)
      #  puts sections.to_s

      # sections.each_with_index do |section, section_index|
      #     puts "SECTION:"+section
      #     puts "SECTION INDEX:"+section_index.to_s
      #     puts "XXXXXXXXXXXXXXXXXXXXXXXXXX"

      #     if section_index % 3 == 0
      #         # date = section.text
      #     elsif section_index % 3 == 1
      #         section.css('font').each_with_index do |job, job_index|
      #         #  puts "MY JOB INDEX :"+job_index.to_s
      #             if job_index % 3 == 0
      #                 # role = job.text.strip
      #                 # # puts "--------------------------"
      #                 # # puts "MY ROLE:"+role
      #                 # # puts "--------------------------"
      #                 # #url = "#{base_url}#{job.at_css('a')['href']}"
      #             elsif job_index % 3 == 1
      #                 # company = job.text.strip
      #                 # array_of_jobs << {
      #                 #     date: date,
      #                 #     role: role,
      #                 #     url: url,
      #                 #     company: company
      #                 #}
      #             end
      #         end
      #     end
      #   end

      #puts sections
      puts "PROGRAM EXITING AFTER SCRAPPING ><><><><><><><><><><><><><><><>"
      @result=links

      #OPEN BROWSER/TAKESCREENSHOT
     @scrapped_data=open_browser(main_url)
     
end

  def data_scraper(my_url)
      Nokogiri::HTML(open(my_url))
      #Nokogiri::(Watir::Browser.new)
  end

  

  def open_browser(url2)
    puts "Entered In browser"
     #browser=Watir::Browser.new :chrome, url: 'http://localhost:4444/wd/hub'
    #  :chrome, url: "http://127.0.0.1:444/wd/hub"
    # Specify the driver path
    chromedriver_path = File.join(File.absolute_path('../..', File.dirname(__FILE__)),"browsers","chromedriver.exe")
    puts chromedriver_path
    Selenium::WebDriver::Service.driver_path = chromedriver_path

     #start_browser
     # browser=Watir::Browser.new :chrome
     # browser.goto("https://google.com")
     # browser.close;

     browser = Watir::Browser.start url2
     # browser.element(css: ".merchant-menu-category").wait_until(&:present?)
     # js_rendered_content = browser.element(css: ".merchant-menu-category")

    # for i in 1..8
    #   browser.elements(css: ".merchant-offers .merchant-menu-category").wait_until(&present?)
    # end  

    browser.element(css: ".merchant-offers .merchant-menu-category").wait_until(&:present?)
    js_rendered_content = browser.element(css: ".merchant-offers .merchant-menu-category")



    
     puts "******************************************"
     puts js_rendered_content.to_yaml

     #puts "SIZE--------------------->"+js_rendered_content.size
     puts "******************************************"
     rendered_content=browser.elements(:class=>"merchant-menu-category")
     rendered_content_first=browser.elements(:class=>"merchant-menu-category").first.html
     rendered_content_size=browser.elements(:class=>"merchant-menu-category").size
     puts rendered_content_size
     puts rendered_content

     array_of_items=[]
     #open("page_#{i}.html", "w"){ |f| f.puts browser.html }

     puts "******************************************"

     rendered_content.each_with_index do |section, section_index|

        puts "LISTING HTML OF OUR REQUIRED ELEMENTS"
        puts "SECTION:"+section.text
        puts "SECTION INDEX:"+section_index.to_s
        array_of_items << {
                   item: section.text
        }
    end

     # browser = Watir::Browser.start url2
     #  for i in 1..20
     #      l = browser.link :text => "#{i}"
     #      l.exists?
     #      l.click
     #      open("page_#{i}.html", "w"){ |f| f.puts browser.html }
     #      sleep 2
     #  end
     #puts "DRIVER LOADED"

      #browser.goto home_path
      # browser.goto url2
      # browser.element(tag_name: 'section')
      # browser.div(:class => "ClassicMerchantOffers").should exist
      #js_rendered_content.link.click
      js_rendered_content.html
      array_of_items
  end

  def search
  end

end

